root ::= break? sep? ((comment | command) (break sep? | <eof>))*
word ::= [^ \t\n(){}:?*,=.\[\]]+
sep ::= [ \t]+
newLine ::= "\n"
break ::= (sep? newLine)+
comment ::= "//" [^\n]*

flag ::= "-" word ("," word)*
escapeSequence ::= "\\" [^]
constraint ::= "<" (escapeSequence | [^<>])* ">"
defaultValue ::= "(" (escapeSequence | [^()])* ")"
vararg ::= "[]"
consuming ::= "..."
optional ::= "?"
name ::= word
type ::= word
arg ::= type constraint? (consuming | vararg)? ":" name (optional defaultValue?)?
param ::= flag | arg
paramList ::= (sep param)*

tag ::= word (sep? (("=" sep? (!"//" [^{}\n])+) | sep? ![^\n])) sep?
entry ::= sep? (tag | command | comment) comment? break sep?

cmdName ::= word ("," word)*
command ::= cmdName paramList break? sep? commandBody
commandBody ::= "{" comment? break? entry* "}"