root ::= break? ((comment | command) (break | <eof>))*
word ::= [^ \t\n(){}:?*,=.\[\]<>]+
sep ::= [ \t]+
newLine ::= "\n"
break ::= (sep? newLine)+ sep?
comment ::= "//" [^\n]*

flag ::= (type constraint? ":")? "-" name ("," name)* defaultValue?
escapeSequence ::= "\\" [^]
constraint ::= "<" (escapeSequence | [^<>])* ">"
defaultValue ::= "(" (escapeSequence | [^()])* ")"
vararg ::= "[]"
consuming ::= "..."
optional ::= "?"
name ::= word
type ::= word
arg ::= type constraint? (consuming | vararg)? ":" name (optional defaultValue?)?
param ::= flag | arg
paramList ::= (sep param)*

tag ::= word sep? ("=" sep? (!"//" [^{}\n])+)? sep?
entry ::= (command | tag | comment) comment? break

cmdName ::= word ("," word)*
command ::= cmdName paramList break? sep? commandBody
commandBody ::= "{" comment? break? entry* break? "}"